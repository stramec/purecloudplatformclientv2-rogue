=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require 'date'

module PureCloud
  class Edge
    # The globally unique identifier for the object.
    attr_accessor :id

    # The name of the entity.
    attr_accessor :name

    # The resource's description.
    attr_accessor :description

    # The current version of the resource.
    attr_accessor :version

    # The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    attr_accessor :date_created

    # The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    attr_accessor :date_modified

    # The ID of the user that last modified the resource.
    attr_accessor :modified_by

    # The ID of the user that created the resource.
    attr_accessor :created_by

    # Indicates if the resource is active, inactive, or deleted.
    attr_accessor :state

    # The application that last modified the resource.
    attr_accessor :modified_by_app

    # The application that created the resource.
    attr_accessor :created_by_app

    # The list of interfaces for the edge. (Deprecated) Replaced by configuring trunks/ip info on the logical interface instead
    attr_accessor :interfaces

    attr_accessor :make

    attr_accessor :model

    attr_accessor :api_version

    attr_accessor :software_version

    attr_accessor :software_version_timestamp

    attr_accessor :software_version_platform

    attr_accessor :software_version_configuration

    attr_accessor :full_software_version

    # The pairing Id for a hardware Edge in the format: 00000-00000-00000-00000-00000. This field is only required when creating an Edge with a deployment type of HARDWARE.
    attr_accessor :pairing_id

    attr_accessor :fingerprint

    attr_accessor :fingerprint_hint

    attr_accessor :current_version

    attr_accessor :staged_version

    attr_accessor :patch

    # The current status of the Edge.
    attr_accessor :status_code

    attr_accessor :edge_group

    # The Site to which the Edge is assigned.
    attr_accessor :site

    # Details about an in-progress or recently in-progress Edge software upgrade. This node appears only if a software upgrade was recently initiated for this Edge.
    attr_accessor :software_status

    attr_accessor :online_status

    attr_accessor :serial_number

    attr_accessor :physical_edge

    attr_accessor :managed

    attr_accessor :edge_deployment_type

    attr_accessor :call_draining_state

    attr_accessor :conversation_count

    # Edge HTTP proxy configuration for the WAN port. The field can be a hostname, FQDN, IPv4 or IPv6 address. If port is not included, port 80 is assumed.
    attr_accessor :proxy

    # True if the offline edge configuration endpoint has been called for this edge.
    attr_accessor :offline_config_called

    # The name provided by the operating system of the Edge.
    attr_accessor :os_name

    # The URI for this object
    attr_accessor :self_uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'name' => :'name',
        
        :'description' => :'description',
        
        :'version' => :'version',
        
        :'date_created' => :'dateCreated',
        
        :'date_modified' => :'dateModified',
        
        :'modified_by' => :'modifiedBy',
        
        :'created_by' => :'createdBy',
        
        :'state' => :'state',
        
        :'modified_by_app' => :'modifiedByApp',
        
        :'created_by_app' => :'createdByApp',
        
        :'interfaces' => :'interfaces',
        
        :'make' => :'make',
        
        :'model' => :'model',
        
        :'api_version' => :'apiVersion',
        
        :'software_version' => :'softwareVersion',
        
        :'software_version_timestamp' => :'softwareVersionTimestamp',
        
        :'software_version_platform' => :'softwareVersionPlatform',
        
        :'software_version_configuration' => :'softwareVersionConfiguration',
        
        :'full_software_version' => :'fullSoftwareVersion',
        
        :'pairing_id' => :'pairingId',
        
        :'fingerprint' => :'fingerprint',
        
        :'fingerprint_hint' => :'fingerprintHint',
        
        :'current_version' => :'currentVersion',
        
        :'staged_version' => :'stagedVersion',
        
        :'patch' => :'patch',
        
        :'status_code' => :'statusCode',
        
        :'edge_group' => :'edgeGroup',
        
        :'site' => :'site',
        
        :'software_status' => :'softwareStatus',
        
        :'online_status' => :'onlineStatus',
        
        :'serial_number' => :'serialNumber',
        
        :'physical_edge' => :'physicalEdge',
        
        :'managed' => :'managed',
        
        :'edge_deployment_type' => :'edgeDeploymentType',
        
        :'call_draining_state' => :'callDrainingState',
        
        :'conversation_count' => :'conversationCount',
        
        :'proxy' => :'proxy',
        
        :'offline_config_called' => :'offlineConfigCalled',
        
        :'os_name' => :'osName',
        
        :'self_uri' => :'selfUri'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'String',
        
        :'name' => :'String',
        
        :'description' => :'String',
        
        :'version' => :'Integer',
        
        :'date_created' => :'DateTime',
        
        :'date_modified' => :'DateTime',
        
        :'modified_by' => :'String',
        
        :'created_by' => :'String',
        
        :'state' => :'String',
        
        :'modified_by_app' => :'String',
        
        :'created_by_app' => :'String',
        
        :'interfaces' => :'Array<EdgeInterface>',
        
        :'make' => :'String',
        
        :'model' => :'String',
        
        :'api_version' => :'String',
        
        :'software_version' => :'String',
        
        :'software_version_timestamp' => :'String',
        
        :'software_version_platform' => :'String',
        
        :'software_version_configuration' => :'String',
        
        :'full_software_version' => :'String',
        
        :'pairing_id' => :'String',
        
        :'fingerprint' => :'String',
        
        :'fingerprint_hint' => :'String',
        
        :'current_version' => :'String',
        
        :'staged_version' => :'String',
        
        :'patch' => :'String',
        
        :'status_code' => :'String',
        
        :'edge_group' => :'EdgeGroup',
        
        :'site' => :'Site',
        
        :'software_status' => :'DomainEdgeSoftwareUpdateDto',
        
        :'online_status' => :'String',
        
        :'serial_number' => :'String',
        
        :'physical_edge' => :'BOOLEAN',
        
        :'managed' => :'BOOLEAN',
        
        :'edge_deployment_type' => :'String',
        
        :'call_draining_state' => :'String',
        
        :'conversation_count' => :'Integer',
        
        :'proxy' => :'String',
        
        :'offline_config_called' => :'BOOLEAN',
        
        :'os_name' => :'String',
        
        :'self_uri' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes.has_key?(:'id')
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes.has_key?(:'name')
        
        
        self.name = attributes[:'name']
        
      
      end

      
      if attributes.has_key?(:'description')
        
        
        self.description = attributes[:'description']
        
      
      end

      
      if attributes.has_key?(:'version')
        
        
        self.version = attributes[:'version']
        
      
      end

      
      if attributes.has_key?(:'dateCreated')
        
        
        self.date_created = attributes[:'dateCreated']
        
      
      end

      
      if attributes.has_key?(:'dateModified')
        
        
        self.date_modified = attributes[:'dateModified']
        
      
      end

      
      if attributes.has_key?(:'modifiedBy')
        
        
        self.modified_by = attributes[:'modifiedBy']
        
      
      end

      
      if attributes.has_key?(:'createdBy')
        
        
        self.created_by = attributes[:'createdBy']
        
      
      end

      
      if attributes.has_key?(:'state')
        
        
        self.state = attributes[:'state']
        
      
      end

      
      if attributes.has_key?(:'modifiedByApp')
        
        
        self.modified_by_app = attributes[:'modifiedByApp']
        
      
      end

      
      if attributes.has_key?(:'createdByApp')
        
        
        self.created_by_app = attributes[:'createdByApp']
        
      
      end

      
      if attributes.has_key?(:'interfaces')
        
        if (value = attributes[:'interfaces']).is_a?(Array)
          self.interfaces = value
        end
        
        
      
      end

      
      if attributes.has_key?(:'make')
        
        
        self.make = attributes[:'make']
        
      
      end

      
      if attributes.has_key?(:'model')
        
        
        self.model = attributes[:'model']
        
      
      end

      
      if attributes.has_key?(:'apiVersion')
        
        
        self.api_version = attributes[:'apiVersion']
        
      
      end

      
      if attributes.has_key?(:'softwareVersion')
        
        
        self.software_version = attributes[:'softwareVersion']
        
      
      end

      
      if attributes.has_key?(:'softwareVersionTimestamp')
        
        
        self.software_version_timestamp = attributes[:'softwareVersionTimestamp']
        
      
      end

      
      if attributes.has_key?(:'softwareVersionPlatform')
        
        
        self.software_version_platform = attributes[:'softwareVersionPlatform']
        
      
      end

      
      if attributes.has_key?(:'softwareVersionConfiguration')
        
        
        self.software_version_configuration = attributes[:'softwareVersionConfiguration']
        
      
      end

      
      if attributes.has_key?(:'fullSoftwareVersion')
        
        
        self.full_software_version = attributes[:'fullSoftwareVersion']
        
      
      end

      
      if attributes.has_key?(:'pairingId')
        
        
        self.pairing_id = attributes[:'pairingId']
        
      
      end

      
      if attributes.has_key?(:'fingerprint')
        
        
        self.fingerprint = attributes[:'fingerprint']
        
      
      end

      
      if attributes.has_key?(:'fingerprintHint')
        
        
        self.fingerprint_hint = attributes[:'fingerprintHint']
        
      
      end

      
      if attributes.has_key?(:'currentVersion')
        
        
        self.current_version = attributes[:'currentVersion']
        
      
      end

      
      if attributes.has_key?(:'stagedVersion')
        
        
        self.staged_version = attributes[:'stagedVersion']
        
      
      end

      
      if attributes.has_key?(:'patch')
        
        
        self.patch = attributes[:'patch']
        
      
      end

      
      if attributes.has_key?(:'statusCode')
        
        
        self.status_code = attributes[:'statusCode']
        
      
      end

      
      if attributes.has_key?(:'edgeGroup')
        
        
        self.edge_group = attributes[:'edgeGroup']
        
      
      end

      
      if attributes.has_key?(:'site')
        
        
        self.site = attributes[:'site']
        
      
      end

      
      if attributes.has_key?(:'softwareStatus')
        
        
        self.software_status = attributes[:'softwareStatus']
        
      
      end

      
      if attributes.has_key?(:'onlineStatus')
        
        
        self.online_status = attributes[:'onlineStatus']
        
      
      end

      
      if attributes.has_key?(:'serialNumber')
        
        
        self.serial_number = attributes[:'serialNumber']
        
      
      end

      
      if attributes.has_key?(:'physicalEdge')
        
        
        self.physical_edge = attributes[:'physicalEdge']
        
      
      end

      
      if attributes.has_key?(:'managed')
        
        
        self.managed = attributes[:'managed']
        
      
      end

      
      if attributes.has_key?(:'edgeDeploymentType')
        
        
        self.edge_deployment_type = attributes[:'edgeDeploymentType']
        
      
      end

      
      if attributes.has_key?(:'callDrainingState')
        
        
        self.call_draining_state = attributes[:'callDrainingState']
        
      
      end

      
      if attributes.has_key?(:'conversationCount')
        
        
        self.conversation_count = attributes[:'conversationCount']
        
      
      end

      
      if attributes.has_key?(:'proxy')
        
        
        self.proxy = attributes[:'proxy']
        
      
      end

      
      if attributes.has_key?(:'offlineConfigCalled')
        
        
        self.offline_config_called = attributes[:'offlineConfigCalled']
        
      
      end

      
      if attributes.has_key?(:'osName')
        
        
        self.os_name = attributes[:'osName']
        
      
      end

      
      if attributes.has_key?(:'selfUri')
        
        
        self.self_uri = attributes[:'selfUri']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      if @name.nil?
        return false
      end

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["active", "inactive", "deleted"]
      if @state && !allowed_values.include?(@state)
        return false
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["NEW", "AWAITING_CONNECTION", "AWAITING_FINGERPRINT", "AWAITING_FINGERPRINT_VERIFICATION", "FINGERPRINT_VERIFIED", "AWAITING_BOOTSTRAP", "ACTIVE", "INACTIVE", "RMA", "UNPAIRING", "UNPAIRED", "INITIALIZING"]
      if @status_code && !allowed_values.include?(@status_code)
        return false
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["ONLINE", "OFFLINE"]
      if @online_status && !allowed_values.include?(@online_status)
        return false
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["HARDWARE", "LDM", "CDM", "INVALID"]
      if @edge_deployment_type && !allowed_values.include?(@edge_deployment_type)
        return false
      end
      
      
      
      
      
      allowed_values = ["NONE", "WAIT", "WAIT_TIMEOUT", "TERMINATE", "COMPLETE"]
      if @call_draining_state && !allowed_values.include?(@call_draining_state)
        return false
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      allowed_values = ["active", "inactive", "deleted"]
      if state && !allowed_values.include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{allowed_values}."
      end
      @state = state
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_code Object to be assigned
    def status_code=(status_code)
      allowed_values = ["NEW", "AWAITING_CONNECTION", "AWAITING_FINGERPRINT", "AWAITING_FINGERPRINT_VERIFICATION", "FINGERPRINT_VERIFIED", "AWAITING_BOOTSTRAP", "ACTIVE", "INACTIVE", "RMA", "UNPAIRING", "UNPAIRED", "INITIALIZING"]
      if status_code && !allowed_values.include?(status_code)
        fail ArgumentError, "invalid value for 'status_code', must be one of #{allowed_values}."
      end
      @status_code = status_code
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] online_status Object to be assigned
    def online_status=(online_status)
      allowed_values = ["ONLINE", "OFFLINE"]
      if online_status && !allowed_values.include?(online_status)
        fail ArgumentError, "invalid value for 'online_status', must be one of #{allowed_values}."
      end
      @online_status = online_status
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] edge_deployment_type Object to be assigned
    def edge_deployment_type=(edge_deployment_type)
      allowed_values = ["HARDWARE", "LDM", "CDM", "INVALID"]
      if edge_deployment_type && !allowed_values.include?(edge_deployment_type)
        fail ArgumentError, "invalid value for 'edge_deployment_type', must be one of #{allowed_values}."
      end
      @edge_deployment_type = edge_deployment_type
    end

    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_draining_state Object to be assigned
    def call_draining_state=(call_draining_state)
      allowed_values = ["NONE", "WAIT", "WAIT_TIMEOUT", "TERMINATE", "COMPLETE"]
      if call_draining_state && !allowed_values.include?(call_draining_state)
        fail ArgumentError, "invalid value for 'call_draining_state', must be one of #{allowed_values}."
      end
      @call_draining_state = call_draining_state
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          description == o.description &&
          version == o.version &&
          date_created == o.date_created &&
          date_modified == o.date_modified &&
          modified_by == o.modified_by &&
          created_by == o.created_by &&
          state == o.state &&
          modified_by_app == o.modified_by_app &&
          created_by_app == o.created_by_app &&
          interfaces == o.interfaces &&
          make == o.make &&
          model == o.model &&
          api_version == o.api_version &&
          software_version == o.software_version &&
          software_version_timestamp == o.software_version_timestamp &&
          software_version_platform == o.software_version_platform &&
          software_version_configuration == o.software_version_configuration &&
          full_software_version == o.full_software_version &&
          pairing_id == o.pairing_id &&
          fingerprint == o.fingerprint &&
          fingerprint_hint == o.fingerprint_hint &&
          current_version == o.current_version &&
          staged_version == o.staged_version &&
          patch == o.patch &&
          status_code == o.status_code &&
          edge_group == o.edge_group &&
          site == o.site &&
          software_status == o.software_status &&
          online_status == o.online_status &&
          serial_number == o.serial_number &&
          physical_edge == o.physical_edge &&
          managed == o.managed &&
          edge_deployment_type == o.edge_deployment_type &&
          call_draining_state == o.call_draining_state &&
          conversation_count == o.conversation_count &&
          proxy == o.proxy &&
          offline_config_called == o.offline_config_called &&
          os_name == o.os_name &&
          self_uri == o.self_uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, description, version, date_created, date_modified, modified_by, created_by, state, modified_by_app, created_by_app, interfaces, make, model, api_version, software_version, software_version_timestamp, software_version_platform, software_version_configuration, full_software_version, pairing_id, fingerprint, fingerprint_hint, current_version, staged_version, patch, status_code, edge_group, site, software_status, online_status, serial_number, physical_edge, managed, edge_deployment_type, call_draining_state, conversation_count, proxy, offline_config_called, os_name, self_uri].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = Object.const_get("PureCloud").const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
