=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require 'date'

module PureCloud
  class Evaluation
    # The globally unique identifier for the object.
    attr_accessor :id

    attr_accessor :name

    attr_accessor :conversation

    # Evaluation form used for evaluation.
    attr_accessor :evaluation_form

    attr_accessor :evaluator

    attr_accessor :agent

    attr_accessor :calibration

    attr_accessor :status

    attr_accessor :answers

    attr_accessor :agent_has_read

    # Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    attr_accessor :release_date

    # Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    attr_accessor :assigned_date

    # Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    attr_accessor :changed_date

    attr_accessor :queue

    # List of different communication types used in conversation.
    attr_accessor :media_type

    # Is only true when evaluation is re-scored.
    attr_accessor :rescore

    # Date of conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    attr_accessor :conversation_date

    # End date of conversation if it had completed before evaluation creation. Null if created before the conversation ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    attr_accessor :conversation_end_date

    # Signifies if the evaluation is never to be released. This cannot be set true if release date is also set.
    attr_accessor :never_release

    # Only used for email evaluations. Will be null for all other evaluations.
    attr_accessor :resource_id

    # The type of resource. Only used for email evaluations. Will be null for evaluations on all other resources.
    attr_accessor :resource_type

    # Is only true when the user making the request does not have sufficient permissions to see evaluation
    attr_accessor :redacted

    attr_accessor :is_scoring_index

    # The URI for this object
    attr_accessor :self_uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'name' => :'name',
        
        :'conversation' => :'conversation',
        
        :'evaluation_form' => :'evaluationForm',
        
        :'evaluator' => :'evaluator',
        
        :'agent' => :'agent',
        
        :'calibration' => :'calibration',
        
        :'status' => :'status',
        
        :'answers' => :'answers',
        
        :'agent_has_read' => :'agentHasRead',
        
        :'release_date' => :'releaseDate',
        
        :'assigned_date' => :'assignedDate',
        
        :'changed_date' => :'changedDate',
        
        :'queue' => :'queue',
        
        :'media_type' => :'mediaType',
        
        :'rescore' => :'rescore',
        
        :'conversation_date' => :'conversationDate',
        
        :'conversation_end_date' => :'conversationEndDate',
        
        :'never_release' => :'neverRelease',
        
        :'resource_id' => :'resourceId',
        
        :'resource_type' => :'resourceType',
        
        :'redacted' => :'redacted',
        
        :'is_scoring_index' => :'isScoringIndex',
        
        :'self_uri' => :'selfUri'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'String',
        
        :'name' => :'String',
        
        :'conversation' => :'Conversation',
        
        :'evaluation_form' => :'EvaluationForm',
        
        :'evaluator' => :'User',
        
        :'agent' => :'User',
        
        :'calibration' => :'Calibration',
        
        :'status' => :'String',
        
        :'answers' => :'EvaluationScoringSet',
        
        :'agent_has_read' => :'BOOLEAN',
        
        :'release_date' => :'DateTime',
        
        :'assigned_date' => :'DateTime',
        
        :'changed_date' => :'DateTime',
        
        :'queue' => :'Queue',
        
        :'media_type' => :'Array<String>',
        
        :'rescore' => :'BOOLEAN',
        
        :'conversation_date' => :'DateTime',
        
        :'conversation_end_date' => :'DateTime',
        
        :'never_release' => :'BOOLEAN',
        
        :'resource_id' => :'String',
        
        :'resource_type' => :'String',
        
        :'redacted' => :'BOOLEAN',
        
        :'is_scoring_index' => :'BOOLEAN',
        
        :'self_uri' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes.has_key?(:'id')
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes.has_key?(:'name')
        
        
        self.name = attributes[:'name']
        
      
      end

      
      if attributes.has_key?(:'conversation')
        
        
        self.conversation = attributes[:'conversation']
        
      
      end

      
      if attributes.has_key?(:'evaluationForm')
        
        
        self.evaluation_form = attributes[:'evaluationForm']
        
      
      end

      
      if attributes.has_key?(:'evaluator')
        
        
        self.evaluator = attributes[:'evaluator']
        
      
      end

      
      if attributes.has_key?(:'agent')
        
        
        self.agent = attributes[:'agent']
        
      
      end

      
      if attributes.has_key?(:'calibration')
        
        
        self.calibration = attributes[:'calibration']
        
      
      end

      
      if attributes.has_key?(:'status')
        
        
        self.status = attributes[:'status']
        
      
      end

      
      if attributes.has_key?(:'answers')
        
        
        self.answers = attributes[:'answers']
        
      
      end

      
      if attributes.has_key?(:'agentHasRead')
        
        
        self.agent_has_read = attributes[:'agentHasRead']
        
      
      end

      
      if attributes.has_key?(:'releaseDate')
        
        
        self.release_date = attributes[:'releaseDate']
        
      
      end

      
      if attributes.has_key?(:'assignedDate')
        
        
        self.assigned_date = attributes[:'assignedDate']
        
      
      end

      
      if attributes.has_key?(:'changedDate')
        
        
        self.changed_date = attributes[:'changedDate']
        
      
      end

      
      if attributes.has_key?(:'queue')
        
        
        self.queue = attributes[:'queue']
        
      
      end

      
      if attributes.has_key?(:'mediaType')
        
        if (value = attributes[:'mediaType']).is_a?(Array)
          self.media_type = value
        end
        
        
      
      end

      
      if attributes.has_key?(:'rescore')
        
        
        self.rescore = attributes[:'rescore']
        
      
      end

      
      if attributes.has_key?(:'conversationDate')
        
        
        self.conversation_date = attributes[:'conversationDate']
        
      
      end

      
      if attributes.has_key?(:'conversationEndDate')
        
        
        self.conversation_end_date = attributes[:'conversationEndDate']
        
      
      end

      
      if attributes.has_key?(:'neverRelease')
        
        
        self.never_release = attributes[:'neverRelease']
        
      
      end

      
      if attributes.has_key?(:'resourceId')
        
        
        self.resource_id = attributes[:'resourceId']
        
      
      end

      
      if attributes.has_key?(:'resourceType')
        
        
        self.resource_type = attributes[:'resourceType']
        
      
      end

      
      if attributes.has_key?(:'redacted')
        
        
        self.redacted = attributes[:'redacted']
        
      
      end

      
      if attributes.has_key?(:'isScoringIndex')
        
        
        self.is_scoring_index = attributes[:'isScoringIndex']
        
      
      end

      
      if attributes.has_key?(:'selfUri')
        
        
        self.self_uri = attributes[:'selfUri']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["PENDING", "INPROGRESS", "FINISHED"]
      if @status && !allowed_values.include?(@status)
        return false
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["EMAIL"]
      if @resource_type && !allowed_values.include?(@resource_type)
        return false
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      allowed_values = ["PENDING", "INPROGRESS", "FINISHED"]
      if status && !allowed_values.include?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{allowed_values}."
      end
      @status = status
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      allowed_values = ["EMAIL"]
      if resource_type && !allowed_values.include?(resource_type)
        fail ArgumentError, "invalid value for 'resource_type', must be one of #{allowed_values}."
      end
      @resource_type = resource_type
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          conversation == o.conversation &&
          evaluation_form == o.evaluation_form &&
          evaluator == o.evaluator &&
          agent == o.agent &&
          calibration == o.calibration &&
          status == o.status &&
          answers == o.answers &&
          agent_has_read == o.agent_has_read &&
          release_date == o.release_date &&
          assigned_date == o.assigned_date &&
          changed_date == o.changed_date &&
          queue == o.queue &&
          media_type == o.media_type &&
          rescore == o.rescore &&
          conversation_date == o.conversation_date &&
          conversation_end_date == o.conversation_end_date &&
          never_release == o.never_release &&
          resource_id == o.resource_id &&
          resource_type == o.resource_type &&
          redacted == o.redacted &&
          is_scoring_index == o.is_scoring_index &&
          self_uri == o.self_uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, conversation, evaluation_form, evaluator, agent, calibration, status, answers, agent_has_read, release_date, assigned_date, changed_date, queue, media_type, rescore, conversation_date, conversation_end_date, never_release, resource_id, resource_type, redacted, is_scoring_index, self_uri].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = Object.const_get("PureCloud").const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
