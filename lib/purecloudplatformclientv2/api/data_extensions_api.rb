=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class DataExtensionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a specific named core type.
    # 
    # @param coretype_name The core type&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Coretype]
    def get_dataextensions_coretype(coretype_name, opts = {})
      data, _status_code, _headers = get_dataextensions_coretype_with_http_info(coretype_name, opts)
      return data
    end

    # Get a specific named core type.
    # 
    # @param coretype_name The core type&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coretype, Fixnum, Hash)>] Coretype data, response status code and response headers
    def get_dataextensions_coretype_with_http_info(coretype_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataExtensionsApi.get_dataextensions_coretype ..."
      end
      
      
      # verify the required parameter 'coretype_name' is set
      fail ArgumentError, "Missing the required parameter 'coretype_name' when calling DataExtensionsApi.get_dataextensions_coretype" if coretype_name.nil?
      
      # verify enum value
      unless ['text', 'longtext', 'url', 'identifier', 'enum', 'date', 'datetime', 'integer', 'number', 'checkbox', 'tag'].include?(coretype_name)
        fail ArgumentError, "invalid value for 'coretype_name', must be one of text, longtext, url, identifier, enum, date, datetime, integer, number, checkbox, tag"
      end
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/dataextensions/coretypes/{coretypeName}".sub('{format}','json').sub('{' + 'coretypeName' + '}', coretype_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Coretype')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataExtensionsApi#get_dataextensions_coretype\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the core types from which all schemas are built.
    # 
    # @param [Hash] opts the optional parameters
    # @return [CoretypeListing]
    def get_dataextensions_coretypes(opts = {})
      data, _status_code, _headers = get_dataextensions_coretypes_with_http_info(opts)
      return data
    end

    # Get the core types from which all schemas are built.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CoretypeListing, Fixnum, Hash)>] CoretypeListing data, response status code and response headers
    def get_dataextensions_coretypes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataExtensionsApi.get_dataextensions_coretypes ..."
      end
      
      # resource path
      local_var_path = "/api/v2/dataextensions/coretypes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CoretypeListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataExtensionsApi#get_dataextensions_coretypes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get quantitative limits on schemas
    # 
    # @param [Hash] opts the optional parameters
    # @return [SchemaQuantityLimits]
    def get_dataextensions_limits(opts = {})
      data, _status_code, _headers = get_dataextensions_limits_with_http_info(opts)
      return data
    end

    # Get quantitative limits on schemas
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SchemaQuantityLimits, Fixnum, Hash)>] SchemaQuantityLimits data, response status code and response headers
    def get_dataextensions_limits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataExtensionsApi.get_dataextensions_limits ..."
      end
      
      # resource path
      local_var_path = "/api/v2/dataextensions/limits".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SchemaQuantityLimits')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataExtensionsApi#get_dataextensions_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
