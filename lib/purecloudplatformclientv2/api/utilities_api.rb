=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class UtilitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get the current system date/time
    # 
    # @param [Hash] opts the optional parameters
    # @return [ServerDate]
    def get_date(opts = {})
      data, _status_code, _headers = get_date_with_http_info(opts)
      return data
    end

    # Get the current system date/time
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerDate, Fixnum, Hash)>] ServerDate data, response status code and response headers
    def get_date_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi.get_date ..."
      end
      
      # resource path
      local_var_path = "/api/v2/date".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServerDate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#get_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get public ip address ranges for PureCloud
    # 
    # @param [Hash] opts the optional parameters
    # @return [IpAddressRangeListing]
    def get_ipranges(opts = {})
      data, _status_code, _headers = get_ipranges_with_http_info(opts)
      return data
    end

    # Get public ip address ranges for PureCloud
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IpAddressRangeListing, Fixnum, Hash)>] IpAddressRangeListing data, response status code and response headers
    def get_ipranges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi.get_ipranges ..."
      end
      
      # resource path
      local_var_path = "/api/v2/ipranges".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IpAddressRangeListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#get_ipranges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get time zones list
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [TimeZoneEntityListing]
    def get_timezones(opts = {})
      data, _status_code, _headers = get_timezones_with_http_info(opts)
      return data
    end

    # Get time zones list
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(TimeZoneEntityListing, Fixnum, Hash)>] TimeZoneEntityListing data, response status code and response headers
    def get_timezones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi.get_timezones ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/timezones".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TimeZoneEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#get_timezones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the information about an X509 PEM encoded certificate or certificate chain.
    # 
    # @param body Certificate
    # @param [Hash] opts the optional parameters
    # @return [ParsedCertificate]
    def post_certificate_details(body, opts = {})
      data, _status_code, _headers = post_certificate_details_with_http_info(body, opts)
      return data
    end

    # Returns the information about an X509 PEM encoded certificate or certificate chain.
    # 
    # @param body Certificate
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParsedCertificate, Fixnum, Hash)>] ParsedCertificate data, response status code and response headers
    def post_certificate_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilitiesApi.post_certificate_details ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling UtilitiesApi.post_certificate_details" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/certificate/details".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParsedCertificate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilitiesApi#post_certificate_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
